corr <- cor(data[,3:16], use='complete.obs')
corrplot(corr,
method = "number",
type = "full",
tl.cex = 0.5,
number.cex = 0.5,
col = colorRampPalette(c("blue", "white", "red"))(200),
order = "hclust",
addCoef.col = "black",
diag = FALSE,
tl.col = "black",
tl.srt = 45)
set.seed(123)
data_split <- initial_split(data, prop = 0.75, strata = 'sars_cov_2_exam_result')
train_data <- training(data_split)
test_data <- testing(data_split)
set.seed(234)
cv_folds <- vfold_cv(train_data, strata = 'sars_cov_2_exam_result', v = 10)
tree_spec <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(), min_n(), tree_depth(), levels = 5)
recipe_tree <- recipe(sars_cov_2_exam_result~., data = train_data) %>%
step_corr(all_numeric_predictors(), threshold=0.9)
wflow_tree <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(recipe_tree)
res_tree <- tune_grid(wflow_tree, resamples = cv_folds, grid = tree_grid)
library(ggmice)
library(rio)
library(tidyverse)
library(corrplot)
library(tibble)
library(parsnip)
library(tidymodels)
library(mice)
library(rpart.plot)
library(DMwR2)
library(smotefamily)
library(caret)
library(janitor)
library(naniar)
library(VIM)
library(ggplot2)
library(reshape2)
library(ggmice)
data <- import('dataset_transformed.xlsx')
vars <- data.frame(colnames(data))
for (i in 1:length(data)) {
vars[i,2] <- length(unique(data[,i]))
vars[i,3] <- sum(!is.na(data[,i]))
vars[i,4] <- sum(is.na(data[,i]))
vars[i,5] <- class(data[,i])
vars[i,6] <- paste(unique(data[,i]), collapse=", ")
}
colnames(vars) <- c("zmienna", "liczba unikalnych wartości", "liczba wartości", "liczba NA","typ")
vars_factor <- which(vars$zmienna %in% c("urine_aspect","urine_leukocytes", "urine_color", "urine_crystals", "unit", "sars_cov_2_exam_result"))
data[,vars_factor] <- lapply(data[,vars_factor], as.factor)
vars_integer <- which(vars['zmienna'] == "patient_age_quantile")
data[,vars_integer] <- as.integer(data[,vars_integer])
data %>% group_by(sars_cov_2_exam_result) %>% summarize(count=n())
sum(is.na(data))/(nrow(data)*ncol(data))
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
data <- data %>% select(where(~ mean(is.na(.)) < 0.9))
data$has_disease <- rowSums(data[, 17:34], na.rm = TRUE)
data$has_disease[data$has_disease > 1] <- 1
data$has_disease <- as.logical(data$has_disease)
plot_pattern(data)
missing_data_plot <- gg_miss_var(data, show_pct = TRUE)
# missing_data_plot <- missing_data_plot +
#   labs(title = "% braków danych w zmiennych",
#        x = "Zmienna",
#        y = "% braków danych")+
#   theme(plot.title = element_text(hjust = 0.5))
missing_data_plot
ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300)
plot_pattern(data, rotate = TRUE)
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern
missing_data_pattern <- plot_pattern(data)
missing_data_pattern
missing_data_pattern <- plot_pattern(data, rotate.names = TRUE)
missing_data_pattern
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern
png(file="missing_data_pattern.png")
missing_data_pattern
width=600, height=350)
png(file="missing_data_pattern.png", width=600, height=350)
missing_data_pattern
dev.off()
png(file="missing_data_pattern.png", width=1200, height=350)
missing_data_pattern
dev.off()
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern
missing_data_pattern + coord_flip()
missing_data + coord_flip()
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern + coord_flip()
missing_data_pattern + coord_flip()
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern
missing_data_pattern + coord_flip()
dev.new(width=20, height=10, unit="cm")
missing_data_plot <- gg_miss_var(data, show_pct = TRUE)
missing_data_plot
# ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300)
dev.new(width=20, height=10, unit="cm")
missing_data_plot <- gg_miss_var(data, show_pct = TRUE)
missing_data_plot
# ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300)
# dev.new(width=20, height=10, unit="cm")
missing_data_plot <- gg_miss_var(data, show_pct = TRUE)
missing_data_plot
# ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300)
dev.new(width=40, height=10, unit="cm")
missing_data_plot <- gg_miss_var(data, show_pct = TRUE)
missing_data_plot
# ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300)
missing_data_plot <- gg_miss_var(data, show_pct = TRUE)
ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300)
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
ggsave("missing_data_plot.png", plot = missing_data_plot, width = 8, height = 6, dpi = 300, bg = "transparent")
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot
library(rio)
library(tidyverse)
library(corrplot)
library(tibble)
library(parsnip)
library(tidymodels)
library(mice)
library(rpart.plot)
library(DMwR2)
library(smotefamily)
library(caret)
library(janitor)
library(naniar)
library(VIM)
library(ggplot2)
library(reshape2)
library(ggmice)
data <- import('dataset_transformed.xlsx')
vars <- data.frame(colnames(data))
for (i in 1:length(data)) {
vars[i,2] <- length(unique(data[,i]))
vars[i,3] <- sum(!is.na(data[,i]))
vars[i,4] <- sum(is.na(data[,i]))
vars[i,5] <- class(data[,i])
vars[i,6] <- paste(unique(data[,i]), collapse=", ")
}
colnames(vars) <- c("zmienna", "liczba unikalnych wartości", "liczba wartości", "liczba NA","typ")
vars_factor <- which(vars$zmienna %in% c("urine_aspect","urine_leukocytes", "urine_color", "urine_crystals", "unit", "sars_cov_2_exam_result"))
data[,vars_factor] <- lapply(data[,vars_factor], as.factor)
vars_integer <- which(vars['zmienna'] == "patient_age_quantile")
data[,vars_integer] <- as.integer(data[,vars_integer])
data %>% group_by(sars_cov_2_exam_result) %>% summarize(count=n())
sum(is.na(data))/(nrow(data)*ncol(data))
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
data <- data %>% select(where(~ mean(is.na(.)) < 0.9))
data$has_disease <- rowSums(data[, 17:34], na.rm = TRUE)
data$has_disease[data$has_disease > 1] <- 1
data$has_disease <- as.logical(data$has_disease)
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern + coord_flip()
data <- data[rowSums(is.na(data)) <= 26,]
data <- data[,-c(17:34)]
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot
data <- data[!is.na(data$leukocytes),]
data <- centralImputation(data)
corr <- cor(data[,3:16], use='complete.obs')
corrplot(corr,
method = "number",
type = "full",
tl.cex = 0.5,
number.cex = 0.5,
col = colorRampPalette(c("blue", "white", "red"))(200),
order = "hclust",
addCoef.col = "black",
diag = FALSE,
tl.col = "black",
tl.srt = 45)
set.seed(123)
data_split <- initial_split(data, prop = 0.75, strata = 'sars_cov_2_exam_result')
train_data <- training(data_split)
test_data <- testing(data_split)
set.seed(234)
cv_folds <- vfold_cv(train_data, strata = 'sars_cov_2_exam_result', v = 10)
tree_spec <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(), min_n(), tree_depth(), levels = 5)
recipe_tree <- recipe(sars_cov_2_exam_result~., data = train_data) %>%
step_corr(all_numeric_predictors(), threshold=0.9)
wflow_tree <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(recipe_tree)
res_tree <- tune_grid(wflow_tree, resamples = cv_folds, grid = tree_grid)
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot
library(rio)
library(tidyverse)
library(corrplot)
library(tibble)
library(parsnip)
library(tidymodels)
library(mice)
library(rpart.plot)
library(DMwR2)
library(smotefamily)
library(caret)
library(janitor)
library(naniar)
library(VIM)
library(ggplot2)
library(reshape2)
library(ggmice)
data <- import('dataset_transformed.xlsx')
vars <- data.frame(colnames(data))
for (i in 1:length(data)) {
vars[i,2] <- length(unique(data[,i]))
vars[i,3] <- sum(!is.na(data[,i]))
vars[i,4] <- sum(is.na(data[,i]))
vars[i,5] <- class(data[,i])
vars[i,6] <- paste(unique(data[,i]), collapse=", ")
}
colnames(vars) <- c("zmienna", "liczba unikalnych wartości", "liczba wartości", "liczba NA","typ")
vars_factor <- which(vars$zmienna %in% c("urine_aspect","urine_leukocytes", "urine_color", "urine_crystals", "unit", "sars_cov_2_exam_result"))
data[,vars_factor] <- lapply(data[,vars_factor], as.factor)
vars_integer <- which(vars['zmienna'] == "patient_age_quantile")
data[,vars_integer] <- as.integer(data[,vars_integer])
data %>% group_by(sars_cov_2_exam_result) %>% summarize(count=n())
sum(is.na(data))/(nrow(data)*ncol(data))
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
data <- data %>% select(where(~ mean(is.na(.)) < 0.9))
data$has_disease <- rowSums(data[, 17:34], na.rm = TRUE)
data$has_disease[data$has_disease > 1] <- 1
data$has_disease <- as.logical(data$has_disease)
missing_data_pattern <- plot_pattern(data, rotate = TRUE)
missing_data_pattern + coord_flip()
data <- data[rowSums(is.na(data)) <= 26,]
data <- data[,-c(17:34)]
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot
data <- data[!is.na(data$leukocytes),]
data <- centralImputation(data)
corr <- cor(data[,3:16], use='complete.obs')
corrplot(corr,
method = "number",
type = "full",
tl.cex = 0.5,
number.cex = 0.5,
col = colorRampPalette(c("blue", "white", "red"))(200),
order = "hclust",
addCoef.col = "black",
diag = FALSE,
tl.col = "black",
tl.srt = 45)
set.seed(123)
data_split <- initial_split(data, prop = 0.75, strata = 'sars_cov_2_exam_result')
train_data <- training(data_split)
test_data <- testing(data_split)
set.seed(234)
cv_folds <- vfold_cv(train_data, strata = 'sars_cov_2_exam_result', v = 10)
tree_spec <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(), min_n(), tree_depth(), levels = 5)
recipe_tree <- recipe(sars_cov_2_exam_result~., data = train_data) %>%
step_corr(all_numeric_predictors(), threshold=0.9)
wflow_tree <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(recipe_tree)
res_tree <- tune_grid(wflow_tree, resamples = cv_folds, grid = tree_grid)
missing_data_pattern <- plot_pattern(data)
missing_data_pattern + coord_flip()
library(rio)
library(tidyverse)
library(corrplot)
library(tibble)
library(parsnip)
library(tidymodels)
library(mice)
library(rpart.plot)
library(DMwR2)
library(smotefamily)
library(caret)
library(janitor)
library(naniar)
library(VIM)
library(ggplot2)
library(reshape2)
library(ggmice)
data <- import('dataset_transformed.xlsx')
vars <- data.frame(colnames(data))
for (i in 1:length(data)) {
vars[i,2] <- length(unique(data[,i]))
vars[i,3] <- sum(!is.na(data[,i]))
vars[i,4] <- sum(is.na(data[,i]))
vars[i,5] <- class(data[,i])
vars[i,6] <- paste(unique(data[,i]), collapse=", ")
}
colnames(vars) <- c("zmienna", "liczba unikalnych wartości", "liczba wartości", "liczba NA","typ")
vars_factor <- which(vars$zmienna %in% c("urine_aspect","urine_leukocytes", "urine_color", "urine_crystals", "unit", "sars_cov_2_exam_result"))
data[,vars_factor] <- lapply(data[,vars_factor], as.factor)
vars_integer <- which(vars['zmienna'] == "patient_age_quantile")
data[,vars_integer] <- as.integer(data[,vars_integer])
data %>% group_by(sars_cov_2_exam_result) %>% summarize(count=n())
sum(is.na(data))/(nrow(data)*ncol(data))
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
data <- data %>% select(where(~ mean(is.na(.)) < 0.9))
data$has_disease <- rowSums(data[, 17:34], na.rm = TRUE)
data$has_disease[data$has_disease > 1] <- 1
data$has_disease <- as.logical(data$has_disease)
missing_data_pattern <- plot_pattern(data)
missing_data_pattern + coord_flip()
data <- data[rowSums(is.na(data)) <= 26,]
data <- data[,-c(17:34)]
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot
data <- data[!is.na(data$leukocytes),]
data <- centralImputation(data)
corr <- cor(data[,3:16], use='complete.obs')
corrplot(corr,
method = "number",
type = "full",
tl.cex = 0.5,
number.cex = 0.5,
col = colorRampPalette(c("blue", "white", "red"))(200),
order = "hclust",
addCoef.col = "black",
diag = FALSE,
tl.col = "black",
tl.srt = 45)
set.seed(123)
data_split <- initial_split(data, prop = 0.75, strata = 'sars_cov_2_exam_result')
train_data <- training(data_split)
test_data <- testing(data_split)
set.seed(234)
cv_folds <- vfold_cv(train_data, strata = 'sars_cov_2_exam_result', v = 10)
tree_spec <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(), min_n(), tree_depth(), levels = 5)
recipe_tree <- recipe(sars_cov_2_exam_result~., data = train_data) %>%
step_corr(all_numeric_predictors(), threshold=0.9)
wflow_tree <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(recipe_tree)
res_tree <- tune_grid(wflow_tree, resamples = cv_folds, grid = tree_grid)
missing_data_pattern <- plot_pattern(data, show_colnames = FALSE)
missing_data_pattern + coord_flip()
missing_data_pattern <- plot_pattern(data, show_col = FALSE)
missing_data_pattern + coord_flip()
missing_data_pattern <- plot_pattern(data)
missing_data_pattern <- plot_pattern(data)
missing_data_pattern + coord_flip()
library(rio)
library(tidyverse)
library(corrplot)
library(tibble)
library(parsnip)
library(tidymodels)
library(mice)
library(rpart.plot)
library(DMwR2)
library(smotefamily)
library(caret)
library(janitor)
library(naniar)
library(VIM)
library(ggplot2)
library(reshape2)
library(ggmice)
data <- import('dataset_transformed.xlsx')
vars <- data.frame(colnames(data))
for (i in 1:length(data)) {
vars[i,2] <- length(unique(data[,i]))
vars[i,3] <- sum(!is.na(data[,i]))
vars[i,4] <- sum(is.na(data[,i]))
vars[i,5] <- class(data[,i])
vars[i,6] <- paste(unique(data[,i]), collapse=", ")
}
colnames(vars) <- c("zmienna", "liczba unikalnych wartości", "liczba wartości", "liczba NA","typ")
vars_factor <- which(vars$zmienna %in% c("urine_aspect","urine_leukocytes", "urine_color", "urine_crystals", "unit", "sars_cov_2_exam_result"))
data[,vars_factor] <- lapply(data[,vars_factor], as.factor)
vars_integer <- which(vars['zmienna'] == "patient_age_quantile")
data[,vars_integer] <- as.integer(data[,vars_integer])
data %>% group_by(sars_cov_2_exam_result) %>% summarize(count=n())
sum(is.na(data))/(nrow(data)*ncol(data))
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
data <- data %>% select(where(~ mean(is.na(.)) < 0.9))
data$has_disease <- rowSums(data[, 17:34], na.rm = TRUE)
data$has_disease[data$has_disease > 1] <- 1
data$has_disease <- as.logical(data$has_disease)
missing_data_pattern <- plot_pattern(data)
missing_data_pattern + coord_flip()
data <- data[rowSums(is.na(data)) <= 26,]
data <- data[,-c(17:34)]
na_percentage <- colSums(is.na(data))/nrow(data)*100
na_percentage_tibble <- tibble(
Column = names(na_percentage),
Percentage_NA = na_percentage
)
na_percentage_tibble <- na_percentage_tibble %>%
arrange(desc(Percentage_NA))
missing_data_plot <- gg_miss_var(data, show_pct = TRUE) +
theme_minimal()
missing_data_plot
data <- data[!is.na(data$leukocytes),]
data <- centralImputation(data)
corr <- cor(data[,3:16], use='complete.obs')
corrplot(corr,
method = "number",
type = "full",
tl.cex = 0.5,
number.cex = 0.5,
col = colorRampPalette(c("blue", "white", "red"))(200),
order = "hclust",
addCoef.col = "black",
diag = FALSE,
tl.col = "black",
tl.srt = 45)
set.seed(123)
data_split <- initial_split(data, prop = 0.75, strata = 'sars_cov_2_exam_result')
train_data <- training(data_split)
test_data <- testing(data_split)
set.seed(234)
cv_folds <- vfold_cv(train_data, strata = 'sars_cov_2_exam_result', v = 10)
tree_spec <- decision_tree(cost_complexity = tune(),
tree_depth = tune(),
min_n = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_grid <- grid_regular(cost_complexity(), min_n(), tree_depth(), levels = 5)
recipe_tree <- recipe(sars_cov_2_exam_result~., data = train_data) %>%
step_corr(all_numeric_predictors(), threshold=0.9)
wflow_tree <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(recipe_tree)
res_tree <- tune_grid(wflow_tree, resamples = cv_folds, grid = tree_grid)
